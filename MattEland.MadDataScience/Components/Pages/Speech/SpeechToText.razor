@page "/Speech/SpeechToText"
@inject SpeechService SpeechService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mx-auto my-8">
    <MudText Typo="Typo.h4">Speech to Text (Speech Recognition)</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-8">
        AI can use neural networks to match audio to known words in supported languages, giving you real-time speech
        recognition.
    </MudText>

    <MudTabs>
        <MudTabPanel Text="Listen">

            <form @onsubmit="HandleSubmit">
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled"
                           Disabled="Listening">
                    Start Listening
                </MudButton>
            </form>

            @if (Listening)
            {
                <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mt-8"/>
            }

            @if (!string.IsNullOrWhiteSpace(Heard))
            {
                <MudAlert Severity="Severity.Success" class="mt-8" Variant="Variant.Outlined">
                    <MudText Typo="Typo.h6" Class="mt8">Heard:</MudText>
                    <MudText Typo="Typo.body1" Class="mt8">@Heard</MudText>
                </MudAlert>
            }
            @if (!string.IsNullOrWhiteSpace(Error))
            {
                <MudAlert Severity="Severity.Error" Class="mt-8">
                    <MudText Typo="Typo.h6" Class="mt8">Error:</MudText>
                    <MudText Typo="Typo.body1" Class="mt8">@Error</MudText>
                </MudAlert>
            }
            @if (IsNoMatch)
            {
                <MudAlert Severity="Severity.Warning" class="mt-8" Variant="Variant.Outlined">
                    <MudText Typo="Typo.h6" Class="mt8">No Speech Detected</MudText>
                </MudAlert>
            }
        </MudTabPanel>
        <MudTabPanel Text="Code">
            <MudText typography="Typo.body1">This code listens to the user speaking and extracts a string</MudText>
            <img src="CodeSpeechToText.png" alt="Code">
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {

    public string? Error { get; set; }
    public string? Heard { get; set; }
    public bool Listening { get; set; }
    public bool IsNoMatch { get; set; }

    private Task HandleSubmit()
    {
        Listening = true;
        Heard = null;
        Error = null;
        IsNoMatch = false;
        StateHasChanged();

        return SpeechService.ListenAsync().ContinueOnUIThread(
            onSuccess: result =>
            {
                if (string.IsNullOrWhiteSpace(Heard))
                {
                    IsNoMatch = true;
                }
                else
                {
                    Heard = result;
                }
            },
            onError: ex => { Error = ex.Message; },
            onFinally: () =>
            {
                Listening = false;
                StateHasChanged();
            });
    }

}