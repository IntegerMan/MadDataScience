@using GeneticSharp
@using MattEland.MadDataScience.SquirrelSimulation.Brains
@using MattEland.MadDataScience.SquirrelSimulation.Genetics

<MudText Typo="Typo.h6">Training</MudText>
<MudText Typo="Typo.caption">Simulate generations of squirrels. The brain will use the best result.</MudText>

<div class="mt-4">
    <MudButton Variant="Variant.Filled"
               Disabled="IsBusy"
               Color="Color.Primary"
               ButtonType="ButtonType.Button"
               @onclick="() => Train(1)">
        Train 1
    </MudButton>

    <MudButton Variant="Variant.Filled"
               Disabled="IsBusy"
               Color="Color.Primary"
               Class="ml-2"
               ButtonType="ButtonType.Button"
               @onclick="() => Train(5)">
        Train 5
    </MudButton>
    
    <MudButton Variant="Variant.Filled"
               Disabled="IsBusy"
               Color="Color.Error"
               class="ml-2"
               ButtonType="ButtonType.Button"
               @onclick="Reset">
        Reset Brain
    </MudButton>

    @if (IsBusy)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mt-4"/>
    }
</div>

<MudExpansionPanels MultiExpansion="false" Class="mt-4">
    <MudExpansionPanel Text="Best Brain" Style="font-size: 0.8em;">
        <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                   Disabled="true" Value="Brain.Weights.Acorn">
            Acorn
        </MudSlider>
        <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                   Disabled="true" Value="Brain.Weights.Tree">
            Tree
        </MudSlider>
        <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                   Disabled="true" Value="Brain.Weights.Doggo">
            Doggo
        </MudSlider>
        <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                   Disabled="true" Value="Brain.Weights.Rabbit">
            Rabbit
        </MudSlider>
        <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                   Disabled="true" Value="Brain.Weights.Squirrel">
            Squirrel
        </MudSlider>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private ILogger<SquirrelTrainingWidget> Logger { get; }
    
    public SquirrelTrainingWidget(ILogger<SquirrelTrainingWidget> logger)
    {
        Logger = logger;
        _solver = new SquirrelGeneticSolver(logger, [123]);
    }

    private readonly SquirrelGeneticSolver _solver;

    [Parameter] public required WeightedBrain Brain { get; set; }

    private Task Train(int generations)
    {
        Logger.LogDebug("Training squirrels for {Generations} generation(s)", generations);

        IsBusy = true;
        StateHasChanged();
        
        // Call solve on a new thread so we can display busy state
        return Task.Run(() => _solver.Solve(generations, Brain.Weights, OnGenerationComplete, OnSolverComplete));
    }
    
    private void Reset()
    {
        Logger.LogDebug("Resetting brain");

        Brain.Weights.Randomize(new Random());
        
        StateHasChanged();
    }

    private void OnGenerationComplete(GeneticAlgorithm ga)
    {
        Logger.LogInformation("Generation {Generation} complete", ga.GenerationsNumber);

        // Move back to the UI thread
        InvokeAsync(() =>
        {
            Brain.Weights = SquirrelScorer.GetWeightsFromChromosome(ga.BestChromosome);
            StateHasChanged();
        });
    }

    private void OnSolverComplete(GeneticAlgorithm ga)
    {
        Logger.LogInformation("Training complete");
        
        // Move back to the UI thread
        InvokeAsync(() =>
        {
            IsBusy = false;
            Brain.Weights = SquirrelScorer.GetWeightsFromChromosome(ga.BestChromosome);
            StateHasChanged();
        });
    }

    public bool IsBusy { get; set; }

}