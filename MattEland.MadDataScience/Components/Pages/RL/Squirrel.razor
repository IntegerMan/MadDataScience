@page "/RL/Manual"

<MudText Typo="Typo.h4">Squirrel Simulation</MudText>
<MudText Typo="Typo.subtitle1" Class="mb-4">
    We'll be training a squirrel to solve a game, but first let's see what the game looks like.
</MudText>

<MudAlert Severity="Severity.Info" Class="mb-4" Style="max-width: 800px;">
    The object of the game is for the squirrel to get to the acorn and then to the tree before the time runs out. The rabbit wanders randomly but will block the squirrel if they try to enter its tile. The dog stays put but will eat the squirrel or rabbit if they enter the adjacent tile.
</MudAlert>

<GameWorldDisplay GameWorld="GameWorld" />
<ManualSquirrelControl GameWorld="GameWorld" PlayerMoveExecuted="OnGameWorldChanged" />

@code {
    public ILogger<SquirrelSimulationService> Logger { get; }

    public Squirrel(SquirrelSimulationService squirrelService, ILogger<SquirrelSimulationService> logger)
    {
        Logger = logger;
        
        Logger.LogDebug("Building test world for squirrel simulation");
        
        GameWorld = squirrelService.BuildTestWorld(assumeDirectControl: true);
    }

    public GameWorld GameWorld { get; set; }

    private void OnGameWorldChanged(GameWorld world)
    {
        Logger.LogTrace("Game world changed");
        
        // This should be the same world, but calling state changed tells the UI to update on the game display
        GameWorld = world;
        StateHasChanged();
    }

}