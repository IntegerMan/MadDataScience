@page "/RL/SettingValues"
@using MattEland.MadDataScience.SquirrelSimulation.Brains
<MudText Typo="Typo.h4">AI Squirrels</MudText>
<MudText Typo="Typo.subtitle1" Class="mb-4">
    Let's look at a squirrel AI that uses prioritized values to make decisions.
</MudText>

@* TODO: Add a UI to set the squirrel importances here *@
<div id="GameArea">
    <section id="GameDisplay">
        <GameWorldDisplay GameWorld="GameWorld"/>
    </section>

    <section id="Weights">
        <MudText Typo="Typo.h6">Smell Priorities</MudText>
        <MudText Typo="Typo.caption">How important is it for the squirrel to smell the acorn, rabbit, or dog?</MudText>
        <div class="mt-4 mb-4">
            <MudSlider Min="-1" Max="1" ValueLabel="true" Step="0.25" TickMarks="true" bind-Value="Brain.Weights.Acorn">
                Acorn
            </MudSlider>
            <MudSlider Min="-1" Max="1" ValueLabel="true" Step="0.25" TickMarks="true" bind-Value="Brain.Weights.Tree">
                Tree
            </MudSlider>
            <MudSlider Min="-1" Max="1" ValueLabel="true" Step="0.25" TickMarks="true" bind-Value="Brain.Weights.Doggo">
                Doggo
            </MudSlider>
            <MudSlider Min="-1" Max="1" ValueLabel="true" Step="0.25" TickMarks="true" bind-Value="Brain.Weights.Rabbit">
                Rabbit
            </MudSlider>
            <MudSlider Min="-1" Max="1" ValueLabel="true" Step="0.25" TickMarks="true" bind-Value="Brain.Weights.Squirrel">
                Squirrel
            </MudSlider>
            <div class="WeightSliderLabels mt-2">
                <MudText Typo="Typo.caption" Color="Color.Error">Yucky</MudText>
                <MudText Typo="Typo.caption" Color="Color.Default">Meh</MudText>
                <MudText Typo="Typo.caption" Color="Color.Success">Yay!</MudText>
            </div>
        </div>
    </section>
</div>

@* TODO: Add a UI to choose visualization overlay for the game world *@

<GameResultNotifications GameWorld="GameWorld"/>

<div class="mt-4">
    <MudButton Variant="Variant.Filled"
               Disabled="GameWorld.State != GameStatus.InProgress"
               Color="Color.Primary"
               ButtonType="ButtonType.Submit"
               @onclick="Next">
        Next Turn
    </MudButton>

    <MudButton Class="ml-4"
               Variant="Variant.Filled"
               Color="Color.Secondary"
               ButtonType="ButtonType.Reset"
               @onclick="() => Reset()">
        Reset Game
    </MudButton>
</div>

@code {
    private readonly SquirrelSimulationService _squirrelService;
    public ILogger<SquirrelSimulationService> Logger { get; }
    public WeightedBrain Brain { get; } = new();

    public WeightedSquirrel(SquirrelSimulationService squirrelService, ILogger<SquirrelSimulationService> logger)
    {
        _squirrelService = squirrelService;
        Logger = logger;
        GameWorld = Reset();
    }

    public GameWorld GameWorld { get; set; }

    private GameWorld Reset()
    {
        Logger.LogDebug("Building test world for squirrel simulation");
        GameWorld = _squirrelService.BuildTestWorld(squirrelBrain: Brain);

        return GameWorld;
    }

    private void Next()
    {
        Logger.LogDebug("Advancing game world");
        GameWorld.SimulateGameTurn();
        StateHasChanged();
    }

}