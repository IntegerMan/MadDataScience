@page "/Vision/ImageGeneration"
@inject AzureOpenAiImageService ImageImageService
@inject ILogger<ImageGeneration> Logger

<MudContainer MaxWidth="MaxWidth.Medium" Class="mx-auto my-8">
    <MudText Typo="Typo.h4">Image Generation</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-8">
        Generate an image from a prompt
    </MudText>

    <MudTabs>
        <MudTabPanel Text="Generate">
            <form @onsubmit="GenerateImage">
                <MudTextField Label="Prompt"
                              Variant="Variant.Outlined"
                              Lines="3"
                              AutoGrow
                              AutoFocus="true"
                              HelperText="Describe the image you'd like to generate"
                              @bind-Value="Prompt" />

                <MudButton Disabled="IsBusy" Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Generate</MudButton>
            </form>

            @if (IsBusy)
            {
                <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mt-4" />
            }

            @if (!string.IsNullOrWhiteSpace(Error))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">
                    <MudText Typo="Typo.h6">Error</MudText>
                    <MudText Typo="Typo.body1">@Error</MudText>
                </MudAlert>
            }

            @if (ImageSource != null)
            {
                <MudAlert Severity="Severity.Info" Variant="Variant.Text" Class="mt-4">
                    <MudText Typo="Typo.h6">Generated Image</MudText>
                    <MudText Typo="Typo.body1">Image generated from prompt @Prompt</MudText>
                </MudAlert>

                <img class="mt-4" src="@ImageSource.ToString()" alt="Image" style="width: 100%; height: auto;">
            }
        </MudTabPanel>
        <MudTabPanel Text="Code">
            <img src="CodeImageGen.png" alt="Image Gen Code" />
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {

    public string? Error { get; set; }

    private Task GenerateImage()
    {
        if (string.IsNullOrWhiteSpace(Prompt))
        {
            Error = "Please enter a prompt first";
            StateHasChanged();
            return Task.CompletedTask;
        }

        IsBusy = true;
        Error = null;
        ImageSource = null;
        Caption = null;
        StateHasChanged();

        Logger.LogInformation("Generating Image from prompt {Prompt}", Prompt);

        return ImageImageService.GenerateImageAsync(Prompt).ContinueOnUIThread(
            onSuccess: result =>
            {
                ImageSource = result.ImageUri;
                Caption = result.Caption;
                Logger.LogInformation("Generated Image from prompt {Prompt} at {ImageSource}", Caption, ImageSource);
            },
            onError: ex =>
            {
                Error = ex.Message;
            },
            onFinally: () =>
            {
                IsBusy = false;
                StateHasChanged();
            });
    }

    public string? Caption { get; set; }
    public bool IsBusy { get; set; }

    public Uri? ImageSource { get; set; }
    public string Prompt { get; set; } = String.Empty;

}