@page "/ML/Predict"
@using Microsoft.Data.Analysis

<MudContainer MaxWidth="MaxWidth.Medium" Class="mx-auto my-8">
    <MudText Typo="Typo.h4">Predict Game Ratings</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-8">
        Let's use a trained model to predict the rating of a hypothetical video game.
    </MudText>

    <MudPaper Class="p-4">
        <form @onsubmit="PredictGameRating">
            <MudText Typo="Typo.h6">Game Information</MudText>
            <MudGrid>
                <MudItem Style="min-width: 350px;">
                    <MudTextField Label="Game Title" @bind-Value="Game.Title" Variant="Variant.Outlined"/>
                    <MudSelect Label="Genre" T="string" Variant="Variant.Outlined" @bind-Value="Game.Genre">
                        @foreach (var g in Genres)
                        {
                            <MudSelectItem Value="@g">@g</MudSelectItem>
                        }
                    </MudSelect>

                    @*<MudSelect Label="Platform" T="string" Variant="Variant.Outlined" @bind-Value="Game.Platform">
                    @foreach (var p in Platforms)
                    {
                        <MudSelectItem Value="@p">@p</MudSelectItem>
                    }
                </MudSelect>*@
                    <MudSelect Label="Target Age Group" T="string" Variant="Variant.Outlined"
                               @bind-Value="Game.TargetAgeGroup">
                        @foreach (var g in AgeGroups)
                        {
                            <MudSelectItem Value="@g">@g</MudSelectItem>
                        }
                    </MudSelect>

                    <MudNumericField Label="Price" @bind-Value="Game.Price" Variant="Variant.Outlined" Min="0"
                                     Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"/>

                    @*
                <MudSelect Label="Developer" T="string" Variant="Variant.Outlined" @bind-Value="Game.Developer">
                    @foreach (var dev in Developers)
                    {
                        <MudSelectItem Value="@dev">@dev</MudSelectItem>
                    }
                </MudSelect>                
                <MudSelect Label="Publisher" T="string" Variant="Variant.Outlined" @bind-Value="Game.Publisher">
                    @foreach (var publisher in Publishers)
                    {
                        <MudSelectItem Value="@publisher">@publisher</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Label="Year Published" @bind-Value="Game.Year" Variant="Variant.Outlined"/>*@


                    <MudNumericField Label="Hours Long" @bind-Value="Game.HoursLong" Variant="Variant.Outlined"
                                     Min="1"/>

                    <MudNumericField Label="Minimum Players" @bind-Value="Game.MinPlayers" Variant="Variant.Outlined"
                                     Min="1" Max="16"/>
                </MudItem>
                <MudItem Style="min-width: 350px;">
                    <MudSelect Label="Graphics Quality" T="float" Variant="Variant.Outlined"
                               @bind-Value="Game.Graphics">
                        @foreach ((string rating, float value) in GraphicsRatings)
                        {
                            <MudSelectItem Value="@value">@rating</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect Label="Music Quality" T="float" Variant="Variant.Outlined" @bind-Value="Game.Music">
                        @foreach ((string rating, float value) in MusicRatings)
                        {
                            <MudSelectItem Value="@value">@rating</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect Label="Story Quality" T="float" Variant="Variant.Outlined" @bind-Value="Game.Story">
                        @foreach ((string rating, float value) in StoryRatings)
                        {
                            <MudSelectItem Value="@value">@rating</MudSelectItem>
                        }
                    </MudSelect>
                    <MudCheckBox Label="Is Online?" @bind-Value="Game.IsOnline" Class="mt-8"/>
                    <MudCheckBox Label="Is Multiplayer?" @bind-Value="Game.Multiplayer"/>
                    <MudCheckBox Label="Requires Special Device?" @bind-Value="Game.RequiresSpecialDevice"/>
                </MudItem>
            </MudGrid>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-8"
                       Disabled="IsBusy">
                Predict Rating
            </MudButton>

            @if (IsBusy)
            {
                <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mt-4"/>
            }

        </form>
    </MudPaper>

    @if (PredictedRating.HasValue)
    {
        <MudAlert Severity="Severity.Success" Class="mt-8" Variant="Variant.Outlined">
            <MudText Typo="Typo.h6">Predicted Rating</MudText>
            <MudText Typo="Typo.subtitle1" Class="mb-4">
                The predicted rating of @(Game.Title ?? "this untitled game") is
                a @PredictedRating.Value.ToString("F1"). The best released games get around 50!
            </MudText>
        </MudAlert>
    }

    @if (!string.IsNullOrWhiteSpace(Error))
    {
        <MudAlert Severity="Severity.Error" Class="mt-8">
            <MudText Typo="Typo.h6">Error</MudText>
            <MudText Typo="Typo.body1">@Error</MudText>
        </MudAlert>
    }
</MudContainer>

@code {
    private readonly MachineLearningService _mlService;
    public bool IsBusy { get; set; }

    public VideoGame Game { get; set; } = new()
    {
        Year = 2025,
        Price = 42.00f,
        RequiresSpecialDevice = false,
        HoursLong = 30,
        MinPlayers = 1,
        Graphics = 3,
        Music = 3,
        Story = 3,
        Genre = "Adventure",
        Platform = "PC",
        Publisher = "Nintendo",
        Developer = "Nintendo",
        TargetAgeGroup = "All Ages"
    };

    public float? PredictedRating { get; set; }
    public string? Error { get; set; }

    public IEnumerable<string> Publishers { get; }
    public IEnumerable<string> Developers { get; }
    public IEnumerable<string> AgeGroups { get; }
    public IEnumerable<string> Platforms { get; }
    public IEnumerable<string> Genres { get; }

    public IEnumerable<(string, float)> GraphicsRatings { get; } =
    [
        ("How did you make it so bad?", 1),
        ("Nah", 2),
        ("Meh", 3),
        ("Yeah, okay", 4),
        ("Ape-like in its gloriousness", 5)
    ];

    public IEnumerable<(string, float)> MusicRatings { get; } =
    [
        ("Like nails on a chalkboard", 1),
        ("This is impressively bad", 2),
        ("As bad as a Matt and Brian sing-a-long", 3),
        ("Skidibi Toilet 2.0?", 4),
        ("Crank that bass!", 5)
    ];

    public IEnumerable<(string, float)> StoryRatings { get; } =
    [
        ("Wait, you forgot a story?", 1),
        ("Somehow, KidzMash returned", 2),
        ("Oh look, Aliens again. Wow.", 3),
        ("Wait, he was his own father?", 4),
        ("THIS NEEDS A SEQUEL. NOW.", 5)
    ];

    public Predict(MachineLearningService mlService)
    {
        _mlService = mlService;
        DataFrame df = mlService.LoadDataFrame();

        // Populate our select choices
        Publishers = ((IEnumerable<string>)df["Publisher"].ValueCounts()["Values"]).Distinct().Order();
        Developers = ((IEnumerable<string>)df["Developer"].ValueCounts()["Values"]).Distinct().Order();
        AgeGroups = ((IEnumerable<string>)df["TargetAgeGroup"].ValueCounts()["Values"]).Distinct().Order();
        Platforms = ((IEnumerable<string>)df["Platform"].ValueCounts()["Values"]).Distinct().Order();
        Genres = ((IEnumerable<string>)df["Genre"].ValueCounts()["Values"]).Distinct().Order();
    }

    private Task PredictGameRating()
    {
        IsBusy = true;
        PredictedRating = null;
        Error = null;
        StateHasChanged();

        return Task.Run(() =>
        {
            try
            {
                float rating = _mlService.PredictGameRating(Game);
                InvokeAsync(() =>
                {
                    PredictedRating = rating;
                    IsBusy = false;
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                InvokeAsync(() =>
                {
                    IsBusy = false;
                    Error = ex.Message;
                    StateHasChanged();
                });
            }
        });
    }

}