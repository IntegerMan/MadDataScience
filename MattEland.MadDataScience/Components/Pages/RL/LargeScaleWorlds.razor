@page "/RL/LargeScale"
@using MattEland.MadDataScience.SquirrelSimulation.Brains
@using MattEland.MadDataScience.SquirrelSimulation.Genetics

<MudText Typo="Typo.h4">Reinforcement Learning &amp; Squirrels</MudText>
<MudText Typo="Typo.subtitle1" Class="mb-4">
    This time we'll use reinforcement learning and genetic algorithms to train a squirrel that maximizes its score.
</MudText>

<div id="GameArea">
    <section id="GameDisplay">
        <GameWorldDisplay GameWorld="GameWorld" SmellWeights="Brain.Weights"/>

        <GameResultNotifications GameWorld="GameWorld"/>

        <div class="mt-4">
            <MudButton Variant="Variant.Filled"
                       Disabled="GameWorld.State != GameStatus.InProgress"
                       Color="Color.Primary"
                       ButtonType="ButtonType.Submit"
                       @onclick="Next">
                Next Turn
            </MudButton>

            <MudButton Class="ml-4"
                       Variant="Variant.Filled"
                       Color="Color.Secondary"
                       ButtonType="ButtonType.Reset"
                       @onclick="() => Reset()">
                Reset Game
            </MudButton>
        </div>
    </section>

    <aside id="Sidebar">
        <section id="Training">
            <SquirrelTrainingWidget Brain="Brain" />
        </section>

        @if (GameWorld.Result is not null)
        {
            <section class="mt-8">
                <GameScorecard Scorer="Scorer" Result="GameWorld.Result"/>
            </section>
        }
    </aside>
</div>

@code {
    private readonly SquirrelSimulationService _squirrelService;
    private ILogger<LargeScaleWorlds> Logger { get; }
    public WeightedBrain Brain { get; } = new();
    public SquirrelScorer Scorer { get; }

    public LargeScaleWorlds(SquirrelSimulationService squirrelService, ILogger<LargeScaleWorlds> logger)
    {
        _squirrelService = squirrelService;
        Logger = logger;
        Scorer = new SquirrelScorer(logger, [], squirrelService.RabbitBrain);
        GameWorld = Reset();
        Brain.Weights.Randomize(new Random());
    }

    public GameWorld GameWorld { get; set; }

    private GameWorld Reset()
    {
        Logger.LogDebug("Building large world for squirrel simulation");
        GameWorld = _squirrelService.BuildLargeWorld(squirrelBrain: Brain);

        return GameWorld;
    }

    private void Next()
    {
        Logger.LogDebug("Advancing game world");
        GameWorld.SimulateGameTurn();
        StateHasChanged();
    }
}