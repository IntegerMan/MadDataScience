#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

#r "nuget:Microsoft.Data.Analysis"

using Microsoft.Data.Analysis;

DataFrame df = DataFrame.LoadCsv("../MattEland.MadDataScience/wwwroot/video_game_reviews.csv");
df.Head(5)

#!csharp

df.Description()

#!csharp

df.Columns.Remove("ReviewText");

df.Info()

#!csharp

// Change Multiplayer to a boolean based on "Yes" or "No"
df["Multiplayer"] = df["Multiplayer"].ElementwiseEquals("Yes");
df["Multiplayer"].ValueCounts()

#!csharp

// RequiresSpecialDevice is a boolean column as well
df["RequiresSpecialDevice"] = df["RequiresSpecialDevice"].ElementwiseEquals("Yes");
df["RequiresSpecialDevice"].ValueCounts()

#!csharp

// Let's see mode
df["GameMode"].ValueCounts()

#!csharp

df["IsOnline"] = df["GameMode"].ElementwiseEquals("Online");
df.Columns.Remove("GameMode");
df["IsOnline"].ValueCounts()

#!csharp

// Let's see what our genres are
df["Genre"].ValueCounts()

#!csharp

// How about publisher?
df["Publisher"].ValueCounts()

#!csharp

// And developer?
df["Developer"].ValueCounts()

#!csharp

(df["Developer"].ValueCounts()["Values"] as StringDataFrameColumn).Distinct()

#!csharp

// Year?
df["Year"].ValueCounts()

#!markdown

Well, shoot. This data looks really synthetic to me.

#!csharp

// Let's see what our platforms are
df["Platform"].ValueCounts()

#!csharp

// And now let's look at our ratings
df["Story"].ValueCounts().Display();
df["Graphics"].ValueCounts().Display();
df["Music"].ValueCounts().Display();

#!csharp

// Let's translate our values to a 1-5 scale with poor being 2, average being 3, good or high being 4, and excellent or Ultra being 5

int TranslateRating(string rating)
{
    switch (rating)
    {
        case "Poor":
        case "Low":
            return 2;
        case "Average":
        case "Medium":
            return 3;
        case "Good":
        case "High":
            return 4;
        case "Excellent":
        case "Ultra":
            return 5;
        default:
            return 1;
    }
}

// Add new columns for our ratings
df.Columns.Add(new PrimitiveDataFrameColumn<int>("StoryRating", df.Rows.Count));
df.Columns.Add(new PrimitiveDataFrameColumn<int>("GraphicsRating", df.Rows.Count));
df.Columns.Add(new PrimitiveDataFrameColumn<int>("MusicRating", df.Rows.Count));

// Apply a function to each row in the DataFrame
foreach (var row in df.Rows)
{
    row["StoryRating"] = TranslateRating(row["Story"].ToString());
    row["GraphicsRating"] = TranslateRating(row["Graphics"].ToString());
    row["MusicRating"] = TranslateRating(row["Music"].ToString());
}

// Proof our results
df["StoryRating"].ValueCounts().Display();
df["GraphicsRating"].ValueCounts().Display();
df["MusicRating"].ValueCounts().Display();

#!csharp

df.Columns.Remove("Story");
df.Columns.Remove("Graphics");
df.Columns.Remove("Music");

df["StoryRating"].SetName("Story");
df["GraphicsRating"].SetName("Graphics");
df["MusicRating"].SetName("Music");

df.Info()

#!csharp

// So, this dataset wound up being obviously synthetic. This resulted in a lot of fields not mattering to the model during prediction.
// To fix this, I'm manually injecting trends in the data for us to demonstrate to the Kidz, though I'll also throw the dataset under the bus and say I did this.

foreach (var row in df.Rows)
{
    float rating = (float)row["Rating"];
    string genre = row["Genre"].ToString();

    float storyWeight = 1.0f;
    float graphicsWeight = 1.0f;
    float musicWeight = 1.0f;
    float onlineBonus = 0.0f;
    float multiplayerBonus = 0.0f;
    float deviceBonus = 0.0f;
    string bestAgeGroup = "All Ages";

    // Adjust the rating based on genre with different genres having different weights for story, graphics, and music
    switch (genre) 
    {
        case "Action":
            storyWeight = 0.5f;
            graphicsWeight = 1.5f;
            musicWeight = 1.2f;
            onlineBonus = 0.1f;
            multiplayerBonus = 0.25f;
            deviceBonus = -1.0f;
            bestAgeGroup = "Teens";
            break;
        case "Adventure":
            storyWeight = 1.5f;
            graphicsWeight = 1.2f;
            musicWeight = 1.3f;
            onlineBonus = 0.1f;
            multiplayerBonus = 0.25f;
            deviceBonus = 0.2f;
            bestAgeGroup = "Kids";
            break;
        case "Fighting":
            storyWeight = 0.2f;
            graphicsWeight = 1.5f;
            musicWeight = 1f;
            onlineBonus = 0.5f;
            multiplayerBonus = 1f;
            deviceBonus = 0.2f;
            bestAgeGroup = "Teens";
            break;
        case "Party":
            storyWeight = 0.1f;
            graphicsWeight = 1.5f;
            musicWeight = 1.3f;
            onlineBonus = 0.05f;
            multiplayerBonus = 0.5f;
            deviceBonus = 0.15f;
            bestAgeGroup = "All Ages";
            break;
        case "Puzzle":
            storyWeight = 0.5f;
            graphicsWeight = 1.2f;
            musicWeight = 1.5f;
            onlineBonus = -0.1f;
            multiplayerBonus = 0.1f;
            deviceBonus = -0.1f;
            break;
        case "RPG":
            storyWeight = 2f;
            graphicsWeight = 1f;
            musicWeight = 1.3f;
            onlineBonus = 0.1f;
            multiplayerBonus = 0.25f;
            deviceBonus = 0.1f;
            break;
        case "Shooter":
            storyWeight = 0.5f;
            graphicsWeight = 1.5f;
            musicWeight = 1.2f;
            onlineBonus = 0.25f;
            multiplayerBonus = 0.5f;
            deviceBonus = -0.2f;
            bestAgeGroup = "Adults";
            break;
        case "Simulation":
            storyWeight = 1.4f;
            graphicsWeight = 1.2f;
            musicWeight = 1.3f;
            onlineBonus = 0.1f;
            multiplayerBonus = 0.05f;
            deviceBonus = 0.5f;
            bestAgeGroup = "Adults";
            break;
        case "Sports":
            storyWeight = 0.3f;
            graphicsWeight = 1.5f;
            musicWeight = 1.2f;
            onlineBonus = 0.1f;
            multiplayerBonus = 0.25f;
            deviceBonus = -0.1f;
            break;
        case "Strategy":
            storyWeight = 1.5f;
            graphicsWeight = 1.3f;
            musicWeight = 1.2f;
            onlineBonus = 0.1f;
            multiplayerBonus = 0.1f;
            deviceBonus = -0.5f;
            bestAgeGroup = "Adults";
            break;
    }

    float ratingModifier = (storyWeight * (int)row["Story"] + graphicsWeight * (int)row["Graphics"] + musicWeight * (int)row["Music"]) / (storyWeight + graphicsWeight + musicWeight) / 5.0f;

    if (row["IsOnline"].Equals(true))
    {
        ratingModifier += onlineBonus;
    }
    if (row["Multiplayer"].Equals(true))
    {
        ratingModifier += multiplayerBonus;
    }
    if (row["RequiresSpecialDevice"].Equals(true))
    {
        ratingModifier += deviceBonus;
    }
    if (row["TargetAgeGroup"].ToString() == bestAgeGroup)
    {
        ratingModifier += 0.5f;
    }

    row["Rating"] = rating * ratingModifier;
}

#!csharp

DataFrame.SaveCsv(df, "../MattEland.MadDataScience/wwwroot/Data.csv");
