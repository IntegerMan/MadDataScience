@page "/Vision/GenAIVision"
@inject ILogger<GenAIVision> Logger
@inject AzureOpenAiChatService ChatService
@inject SpeechService SpeechService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mx-auto my-8">
<MudText Typo="Typo.h4">Chatting with Images</MudText>
<MudText Typo="Typo.subtitle1" Class="mb-8">
    Some LLMs can also interpret images and generate images of their own.
</MudText>

<img src="@ImageSource" alt="Sample Image" class="img-fluid"/>

@if (Description is not null)
{
    <MudAlert Severity="Severity.Info" Class="mt-8" Variant="Variant.Text">
        <MudText Typo="Typo.h6">Image Description</MudText>
        <MudText Typo="Typo.body1">@Description</MudText>
    </MudAlert>
}

@if (!string.IsNullOrWhiteSpace(Error))
{
    <MudAlert Severity="Severity.Error" Class="mt-8">
        <MudText Typo="Typo.h6">Error</MudText>
        <MudText Typo="Typo.body1">@Error</MudText>
    </MudAlert>
}

@if (IsBusy)
{
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mt-8"/>
}

<div class="mt-8">
<MudButton Disabled="IsBusy" @onclick="HandleDescribeClick" Variant="Variant.Filled" Color="Color.Primary">
    Describe This
</MudButton>
</div>
</MudContainer>

@code {
    public Uri ImageSource { get; set; } = new("https://www.danylkoweb.com/content/images/collection-codemash.jpg");
    public string? Description { get; set; }
    public string? Error { get; set; }
    public bool IsBusy { get; set; }
    public string VoiceName { get; set; } = "en-US-GuyNeural";
    
    private Task HandleDescribeClick()
    {
        IsBusy = true;
        Description = null;
        Error = null;
        StateHasChanged();

        string prompt = "You are DogOS, a cute and playful AI assistant at KidzMash conference at CodeMash. The user has given you an image to look at. Talk about what you see, from the perspective of a dog. Being silly is fine, but keep it to a few sentences. Please avoid emojis.";
        return ChatService.DescribeImageAsync(prompt, ImageSource).ContinueOnUIThread(
            description =>
            {
                Logger.LogInformation("Described Image {ImageSource} as {Description}", ImageSource, description);
                Description = description;
                _ = SpeechService.SpeakAsync(description, VoiceName);
            },
            error =>
            {
                Error = error.Message;
            },
            () =>
            {
                IsBusy = false;
                StateHasChanged();
            });
    }

}