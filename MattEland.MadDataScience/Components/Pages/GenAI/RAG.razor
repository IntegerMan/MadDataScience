@page "/GenAI/RAG"
@using Markdig
@using OpenAI.Chat
@inject ILogger<RAG> Logger
@inject AzureOpenAiChatService ChatService

<div id="ChatContainer">
    <section id="PageHeader">
        <MudText Typo="Typo.h4">Chat with Data</MudText>
        <MudText Typo="Typo.subtitle1" Class="mb-8">
            You can use Retrieval Augmentation Generation (RAG) to add in extra context to your system. Here's an example with the conference schedule.
        </MudText>
    </section>
    
    <section id="SystemPrompt">
        <MudTextField Lines="8"
                      @bind-Value="SystemPrompt"
                      Variant="Variant.Filled"
                      Class="mb-4"
                      Label="System Prompt"
                      HelperText="The System Prompt governs how the AI agent responds"/>
    </section>

    <div id="ChatMessages">
        @foreach (var item in ChatMessages)
        {
            @if (item is UserChatMessage ucm)
            {
                <div class="chat user">
                    <div class="chat-participant-name">
                        <b>You</b>
                    </div>
                    <div class="chat-message">
                        @foreach (var part in ucm.Content)
                        {
                            <span>@part.Text</span>
                        }
                    </div>
                </div>
            }

            @if (item is AssistantChatMessage acm)
            {
                <div class="chat assistant">
                    <div class="chat-participant-name">
                        <b>AI Agent</b>
                    </div>
                    <div class="chat-message">
                        @foreach (var part in acm.Content)
                        {
                            <span>@((MarkupString)Markdown.ToHtml(part.Text))</span>
                        }
                    </div>
                </div>
            }
        }

        @if (IsBusy)
        {
            <div class="chat assistant">
                <div class="chat-participant-name">
                    <b>AI Agent</b>
                </div>
                <div class="chat-message">
                    <em>Retrieving response...</em>
                    <br />
                    <MudProgressLinear Indeterminate="true" Color="Color.Default" Class="mt-2" />
                </div>
            </div>
        }
        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
        {
            <div class="chat error">
                <div class="chat-participant-name">
                    <b>Error</b>
                </div>
                <div class="chat-message">
                    @ErrorMessage
                </div>
            </div>
        }

    </div>
    
    <MudDivider Class="mt-4 mb-4" />

    <form @onsubmit="SendChatAsync" id="UserTextEntry" class="mb-4">
        <MudTextField @bind-Value="Prompt" 
                      Variant="Variant.Text" 
                      Class="mr-4"
                      Immediate="true"
                      TextUpdateSuppression="false"
                      Label="Enter your message"/>
        <MudButton ButtonType="ButtonType.Submit"
                   Disabled="IsBusy"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            Send
        </MudButton>
    </form>
</div>

@code {
    public bool IsBusy { get; set; }
    public string ErrorMessage { get; set; } = string.Empty;

    public string SystemPrompt { get; set; } = @"
You are a silly but helpful AI chatbot at the Global AI Bootcamp 2025 online conference as part of Matt Eland's 'Mad Data Science' talk. You are a demo in this talk. This event is the Cleveland, Ohio event, but many others are occurring throughout the world. Keep your answers short and friendly. 
Sessions at this event include:

0800-0840 Intro & Keynote
0840-0850 Break
0850-0950 Session 1: “Human Language is the new UI. How is this possible?” By Bill Wilder
0950-1000 Break
1000-1100 Session 2: “Mad Data Science” By Matt Eland
1100-1110 Break
1110-1210 Session 3: “.NET AI Architecture and DevOps” By Jeffrey Palermo
1210-1220 Break
1220-1320 Session 4: “Intro to PySpark in Microsoft Fabric” By Jared Kuehn
1320-1330 Break
1330-1430 Session 5: “Build an agent with Azure AI Agent Service” By Veronika Kolesnikova
1430-1440 Break
1440-1540 Session 6: “AI for Everyone with Azure AI Services” By Douglas Starnes
1540-1650 Wrap-up
";
    
    public string Prompt { get; set; } = string.Empty;

    public List<ChatMessage> ChatMessages { get; set; } = new()
    {
        new AssistantChatMessage("Hello! I'm Matt's demo AI Assistant. How can I help you today?")
    };

    private Task SendChatAsync()
    {
        string message = Prompt;
        Logger.LogInformation("Sending Chat Message: {Message}", message);

        // Indicate we're busy
        ChatMessages.Add(new UserChatMessage(message));
        Prompt = string.Empty;
        IsBusy = true;
        ErrorMessage = string.Empty;
        StateHasChanged();
        
        return ChatService.ChatAsync(SystemPrompt, ChatMessages).ContinueOnUIThread(
            onSuccess: response =>
            {
                ChatMessages.Add(new AssistantChatMessage(response));
            },
            onError: ex =>
            {
                ErrorMessage = ex.Message;
            },
            onFinally: () =>
            {
                IsBusy = false;
                StateHasChanged();
            });
    }

}