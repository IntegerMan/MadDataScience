@page "/RL/SettingValues"
@using MattEland.MadDataScience.SquirrelSimulation.Brains
@using MattEland.MadDataScience.SquirrelSimulation.Genetics
<MudText Typo="Typo.h4">AI Squirrels</MudText>
<MudText Typo="Typo.subtitle1" Class="mb-4">
    Let's look at a squirrel AI that uses prioritized values to make decisions.
</MudText>

<div id="GameArea">
    <section id="GameDisplay">
        <GameWorldDisplay GameWorld="GameWorld" Visualization="SelectedVisualization" SmellWeights="Brain.Weights"/>

        <GameResultNotifications GameWorld="GameWorld"/>

        <div class="mt-4">
            <MudButton Variant="Variant.Filled"
                       Disabled="GameWorld.State != GameStatus.InProgress"
                       Color="Color.Primary"
                       ButtonType="ButtonType.Submit"
                       @onclick="Next">
                Next Turn
            </MudButton>

            <MudButton Class="ml-4"
                       Variant="Variant.Filled"
                       Color="Color.Secondary"
                       ButtonType="ButtonType.Reset"
                       @onclick="() => Reset()">
                Reset Game
            </MudButton>
        </div>
    </section>

    <aside id="Sidebar">
        <section id="Weights">
            <MudText Typo="Typo.h6">Smell Priorities</MudText>
            <MudText Typo="Typo.caption">
                This squirrel senses the world through its nose. Adjust the importance of each smell to determine where
                it goes.
            </MudText>
            <div class="mt-4 mb-4">
                <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                           ValueChanged="v => Brain.Weights.Acorn = v">
                    Acorn
                </MudSlider>
                <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                           ValueChanged="v => Brain.Weights.Tree = v">
                    Tree
                </MudSlider>
                <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                           ValueChanged="v => Brain.Weights.Doggo = v">
                    Doggo
                </MudSlider>
                <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                           ValueChanged="v => Brain.Weights.Rabbit = v">
                    Rabbit
                </MudSlider>
                <MudSlider Min="-5" Max="5" ValueLabel="true" Step="1f" TickMarks="true" T="float"
                           ValueChanged="v => Brain.Weights.Squirrel = v">
                    Squirrel
                </MudSlider>
                <div class="WeightSliderLabels mt-2">
                    <MudText Typo="Typo.caption" Color="Color.Error">Yucky</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Default">Meh</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Success">Yay!</MudText>
                </div>
            </div>
        </section>
        
        <section id="Visualization" class="mt-8">
            <MudText Typo="Typo.h6">Visualization</MudText>
            <MudText Typo="Typo.caption">Choose a visualization overlay for the game world</MudText>
            <div class="mt-4">
                <MudSelect Variant="Variant.Outlined" T="VisualizationKind"
                           bind-Value="SelectedVisualization"
                           ValueChanged="v => OnVisualizationChanged(v)">
                    @foreach (var visualization in Enum.GetValues(typeof(VisualizationKind)).Cast<VisualizationKind>())
                    {
                        <MudSelectItem Value="@visualization">@visualization</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </section>

        @if (GameWorld.Result is not null)
        {
            <section class="mt-8">
                <GameScorecard Scorer="Scorer" Result="GameWorld.Result"/>
            </section>
        }
    </aside>
</div>

@code {
    private readonly SquirrelSimulationService _squirrelService;
    public ILogger<WeightedSquirrel> Logger { get; }
    public WeightedBrain Brain { get; } = new();
    public SquirrelScorer Scorer { get; }
    public VisualizationKind SelectedVisualization { get; set; } = VisualizationKind.None;

    public WeightedSquirrel(SquirrelSimulationService squirrelService, ILogger<WeightedSquirrel> logger)
    {
        _squirrelService = squirrelService;
        Logger = logger;
        Scorer = new SquirrelScorer(logger, []);
        GameWorld = Reset();
    }

    public GameWorld GameWorld { get; set; }

    private GameWorld Reset()
    {
        Logger.LogDebug("Building test world for squirrel simulation");
        GameWorld = _squirrelService.BuildTestWorld(squirrelBrain: Brain);

        return GameWorld;
    }

    private void Next()
    {
        Logger.LogDebug("Advancing game world");
        GameWorld.SimulateGameTurn();
        StateHasChanged();
    }

    private void OnVisualizationChanged(VisualizationKind kind)
    {
        Logger.LogDebug("Visualization changed to {VisualizationKind}", kind);
        SelectedVisualization = kind;
        StateHasChanged();
    }

}