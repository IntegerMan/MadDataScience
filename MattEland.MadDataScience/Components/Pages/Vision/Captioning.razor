@page "/Vision/ImageCaptioning"
@inject VisionService VisionService
@inject ILogger<Captioning> Logger

<MudContainer MaxWidth="MaxWidth.Large" Class="mx-auto my-8">
    <MudText Typo="Typo.h4">Image Captioning</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-8">
        Describe the contents of an image
    </MudText>

    <MudTabs>
        <MudTabPanel Text="Caption">
            <MudCarousel @bind-SelectedIndex="_selectedIndex" TData="string" AutoCycle="false" Style="height: 800px;">
                @foreach (var image in Images)
                {
                    <MudCarouselItem>
                        <img src="@image" alt="Sample Image" style="height: 90%; width: auto; cursor: pointer; object-fit: contain;" />
                    </MudCarouselItem>
                }
            </MudCarousel>

            @if (!string.IsNullOrWhiteSpace(Error))
            {
                <MudAlert Severity="Severity.Error" Class="mt-8">
                    <MudText Typo="Typo.h6">Error</MudText>
                    <MudText Typo="Typo.body1">@Error</MudText>
                </MudAlert>
            }

            @if (!string.IsNullOrWhiteSpace(Caption))
            {
                <MudAlert Severity="Severity.Info" Class="mt-8">
                    <MudText Typo="Typo.body1">@Caption</MudText>
                </MudAlert>
            }

            @if (IsBusy)
            {
                <MudProgressLinear Indeterminate="true" Color="Color.Primary" class="mt-8" />
            }

            <div class="mt-8">
                <MudButton Disabled="IsBusy" @onclick="HandleCaptionClick" Variant="Variant.Filled"
                           Color="Color.Primary">
                    Caption This
                </MudButton>
            </div>
        </MudTabPanel>
        <MudTabPanel Text="Code">
            <img src="CodeImageCaption.png" alt="Code">
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    public string? Caption { get; set; }
    public string? Error { get; set; }
    public bool IsBusy { get; set; }
    private int _selectedIndex = 0;
    private List<string> Images { get; } =
        [
        "CM1.jpg",
        "CM2.jpg",
        "CM3.jpg",
        "CM4.jpg",
        "CM5.jpg",
        "CM6.jpg",
        "CM7.jpg",
        "CM8.jpg",
        "CM9.jpg",
        "CM10.jpg",
        "CM11.jpg",
        "CM12.jpg",
        "CM13.jpg",
        "CM14.jpg"
    ];

    private Task HandleCaptionClick()
    {
        string imageSource = Images[_selectedIndex];
        BinaryData? data = VisionService.LoadImageData(imageSource);
        if (data == null)
        {
            Error = "Failed to load image data";
            StateHasChanged();
            return Task.CompletedTask;
        }

        Logger.LogDebug("Captioning Image {ImageSource}", imageSource);

        Caption = null;
        Error = null;
        IsBusy = true;
        StateHasChanged();

        return VisionService.GetImageCaptionAsync(data).ContinueOnUIThread(
            onSuccess: caption =>
            {
                Caption = caption ?? "No caption found";
                Logger.LogInformation("Captioned Image {ImageSource} as {Caption}", imageSource, Caption);
            },
            onError: ex => Error = ex.Message,
            onFinally: () =>
            {
                IsBusy = false;
                StateHasChanged();
            });
    }

}