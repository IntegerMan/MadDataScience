@page "/Vision/GenAIVision"
@inject ILogger<GenAIVision> Logger
@inject AzureOpenAiChatService ChatService
@inject SpeechService SpeechService

<MudContainer MaxWidth="MaxWidth.Medium" Class="mx-auto my-8">
<MudText Typo="Typo.h4">Chatting with Images</MudText>
<MudText Typo="Typo.subtitle1" Class="mb-8">
    Some LLMs can also interpret images and generate images of their own.
</MudText>

<MudCarousel @bind-SelectedIndex="_selectedIndex" TData="string" AutoCycle="false" Style="height: 800px;">
    @foreach (var image in Images)
    {
        <MudCarouselItem>
            <img src="@image" alt="Sample Image" style="height: 90%; width: auto; cursor: pointer; object-fit: contain;" />
        </MudCarouselItem>
    }
</MudCarousel>

@if (Description is not null)
{
    <MudAlert Severity="Severity.Info" Class="mt-8" Variant="Variant.Text">
        <MudText Typo="Typo.h6">Image Description</MudText>
        <MudText Typo="Typo.body1">@Description</MudText>
    </MudAlert>
}

@if (!string.IsNullOrWhiteSpace(Error))
{
    <MudAlert Severity="Severity.Error" Class="mt-8">
        <MudText Typo="Typo.h6">Error</MudText>
        <MudText Typo="Typo.body1">@Error</MudText>
    </MudAlert>
}

@if (IsBusy)
{
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mt-8"/>
}

<div class="mt-8">
<MudButton Disabled="IsBusy" @onclick="HandleDescribeClick" Variant="Variant.Filled" Color="Color.Primary">
    Describe This
</MudButton>
</div>
</MudContainer>

@code {
    private int _selectedIndex = 0;
    private List<string> Images { get; } =
    [
        "CM1.jpg",
        "CM2.jpg",
        "CM3.jpg",
        "CM4.jpg",
        "CM5.jpg",
        "CM6.jpg",
        "CM7.jpg",
        "CM8.jpg",
        "CM9.jpg",
        "CM10.jpg",
        "CM11.jpg",
        "CM12.jpg",
        "CM13.jpg",
        "CM14.jpg"
    ];
    
    public string? Description { get; set; }
    public string? Error { get; set; }
    public bool IsBusy { get; set; }
    public string VoiceName { get; set; } = "en-US-GuyNeural";
    
    private Task HandleDescribeClick()
    {
        string imageSource = Images[_selectedIndex];
        
        IsBusy = true;
        Description = null;
        Error = null;
        StateHasChanged();

        string prompt = "You are DogOS, a cute and playful AI assistant at an online conference called Global AI Bootcamp 2025. The user has given you an image to look at. Talk about what you see, from the perspective of a dog. Being silly is fine, but keep it to a few sentences. Please avoid emojis.";
        return ChatService.DescribeImageAsync(prompt, imageSource).ContinueOnUIThread(
            description =>
            {
                Logger.LogInformation("Described Image {ImageSource} as {Description}", imageSource, description);
                Description = description;
                _ = SpeechService.SpeakAsync(description, VoiceName);
            },
            error =>
            {
                Error = error.Message;
            },
            () =>
            {
                IsBusy = false;
                StateHasChanged();
            });
    }

}