@page "/Vision/DenseCaptioning"
@rendermode InteractiveServer
@inject VisionService VisionService
@inject ILogger<DenseCaptioning> Logger

<MudContainer MaxWidth="MaxWidth.Medium" Class="mx-auto my-8">
    <MudText Typo="Typo.h4">Dense Captioning</MudText>
    <MudText Typo="Typo.subtitle1" Class="mb-8">
        Detect and describe objects inside of an image
    </MudText>

    <div style="position: relative; display: inline-block;">
        <img src="@ImageSource" alt="Sample Image" class="img-fluid"/>
        @if (Objects.Any())
        {
            @foreach (var obj in Objects)
            {
                <div style="position: absolute; border: 2px solid red;
                    top: @(obj.BoundingBox.Y)px;
                left: @(obj.BoundingBox.X)px;
                width: @(obj.BoundingBox.Width)px;
                height: @(obj.BoundingBox.Height)px;"
                     title="@obj.Name">
                </div>
            }
        }
    </div>

    <div class="mt-8">
        <MudButton Disabled="IsBusy" @onclick="HandleCaptionClick" Variant="Variant.Filled" Color="Color.Primary">
            Detect Objects
        </MudButton>
    </div>

    @if (IsBusy)
    {
        <MudProgressLinear class="mt-8" Indeterminate="true" Color="Color.Primary"/>
    }

    @if (Objects.Any())
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Text" class="mt-8">
            <MudText Typo="Typo.h6">Objects Detected</MudText>
            <ul>
                @foreach (var obj in Objects)
                {
                    <li>@obj (@obj.BoundingBox.X , @obj.BoundingBox.Y, @obj.BoundingBox.Width, @obj.BoundingBox.Height)</li>
                }
            </ul>
        </MudAlert>
    }
    
    @if (!string.IsNullOrWhiteSpace(Error))
    {
        <MudAlert Severity="Severity.Error" Class="mt-8">
            <MudText Typo="Typo.h6">Error</MudText>
            <MudText Typo="Typo.body1">@Error</MudText>
        </MudAlert>
    }
</MudContainer>

@code {
    public string ImageSource => "CodeMash.jpg";
    List<ObjectDetectionResult> Objects { get; set; } = new();
    public bool IsBusy { get; set; }
    public string? Error { get; set; }

    private Task HandleCaptionClick()
    {
        BinaryData? data = VisionService.LoadImageData(ImageSource);
        if (data == null)
        {
            Error = "Failed to load image data";
            StateHasChanged();
            return Task.CompletedTask;
        }

        Logger.LogDebug("Dense Captioning Image {Image}", ImageSource);

        Error = null;
        Objects.Clear();
        IsBusy = true;
        StateHasChanged();

        return VisionService.CaptionObjectsAsync(data).ContinueOnUIThread(
            onSuccess: objects =>
            {
                Objects = objects;
                Logger.LogInformation("Detected {Count} objects in {Image}", Objects.Count, ImageSource);
            },
            onError: ex => Error = ex.Message,
            onFinally: () =>
            {
                IsBusy = false;
                StateHasChanged();
            });
    }

}